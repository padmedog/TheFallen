<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ip = "192.168.0.18";
port = 5524;
socket = network_create_socket(network_socket_tcp);
connection = network_connect_raw(socket,ip,port);
if(connection &lt; 0)
{
    show_message("failed to connect to server");
}
timeout = 60;
//ping = 0;
entId = -1;

//controls and stuff
pleft = false;
pright = false;
pforward = false;
pbackward = false;
pup = false;
pdown = false;
can_look = false;

//keys
key_left = ord("A");
key_right = ord("D");
key_forward = ord("W");
key_backward = ord("S");
key_up = vk_space;
key_down = vk_shift;
key_look_toggle = ord("V");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*var buff = buffer_create(3,buffer_fixed,1);
buffer_write(buff,buffer_u16,2);
network_send_packet(socket,buff,buffer_tell(buff));
buffer_delete(buff);
alarm[0] = timeout;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//movement
var left = keyboard_check(key_left),
    right = keyboard_check(key_right),
    forward = keyboard_check(key_forward),
    backward = keyboard_check(key_backward),
    up = keyboard_check(key_up),
    down = keyboard_check(key_down);
if(left != pleft || right != pright || forward != pforward || backward != pbackward || up != pup || down != pdown)
{
    var _buff = buffer_create(4,buffer_fixed,1);
    buffer_write(_buff,buffer_u16,0);
    buffer_write(_buff,buffer_u8,bin_to_int(forward,backward,left,right,up,down));
    network_send_packet(socket,_buff,buffer_tell(_buff));
    buffer_delete(_buff);
}

//looking
var wid_ = window_get_width()/2,
    hgt_ = window_get_height()/2;
if(keyboard_check_pressed(key_look_toggle))
{
    window_mouse_set(wid_,hgt_);
    can_look = !can_look;
}
if(can_look)
{
    var view_x = window_mouse_get_x()-wid_,
        view_y = window_mouse_get_y()-hgt_;
    if(view_x != 0 || view_y != 0)
    {
        var _buff = buffer_create(256,buffer_fixed,1);
        buffer_write(_buff,buffer_u16,1);
        buffer_write(_buff,buffer_f32,view_x);
        buffer_write(_buff,buffer_f32,view_y);
        network_send_packet(socket,_buff,buffer_tell(_buff));
        buffer_delete(_buff);
        window_mouse_set(wid_,hgt_);
    }
}
//camera update
if(entId &gt;= 0)
{
    var ent_ = get_entity(entId);
    obj_camera.x = ent_.x;
    obj_camera.y = ent_.y;
    obj_camera.z = ent_.z+(ent_.height*0.875);
    obj_camera.dir = ent_.dir;
    obj_camera.pit = ent_.pit;
}

//end
pleft = left;
pright = right;
pforward = forward;
pbackward = backward;
pup = up;
pdown = down;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var msgtype, sock;
msgtype = ds_map_find_value(async_load,"type");
sock = ds_map_find_value(async_load,"id");

switch(msgtype)
{
    case network_type_data:
        var buff_ = ds_map_find_value(async_load,"buffer");
        data_received(buff_,sock);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var buff_ = buffer_create(8,buffer_fixed,1);
buffer_write(buff_,buffer_u16,3);
network_send_packet(socket,buff_,buffer_tell(buff_));
buffer_delete(buff_);
network_destroy(socket);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
