<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_message("-start sending player join data");
global.array[3] = ds_list_create();
global.array[4] = _inst.socket;
with(obj_playerobject)
{
    if(socket != global.array[4])
    {
        ds_list_add(global.array[3],socket);
    }
}
var buff_ = buffer_create(256,buffer_grow,1);
buffer_write(buff_,buffer_u16,2                 );
buffer_write(buff_,buffer_s16,_inst.socket      );
buffer_write(buff_,buffer_f32,_inst.dir         );
buffer_write(buff_,buffer_f32,_inst.pit         );
buffer_write(buff_,buffer_f32,_inst.x           );
buffer_write(buff_,buffer_f32,_inst.y           );
buffer_write(buff_,buffer_f32,_inst.z           );
buffer_write(buff_,buffer_u16,_inst.current_item);
var sz_ = ds_list_size(global.array[3]);
show_debug_message("send playerobject data to each socket");
for(i = 0; i &lt; sz_; i++)
{
    network_send_packet(ds_list_find_value(global.array[3],i),buff_,buffer_tell(buff_));
}
buffer_delete(buff_);
buff_ = buffer_create(256,buffer_grow,1);
buffer_write(buff_,buffer_u16,4         );
buffer_write(buff_,buffer_f32,_inst.dir );
buffer_write(buff_,buffer_f32,_inst.pit );
buffer_write(buff_,buffer_f32,_inst.x   );
buffer_write(buff_,buffer_f32,_inst.y   );
buffer_write(buff_,buffer_f32,_inst.z   );
buffer_write(buff_,buffer_u16,_inst.current_item);
buffer_write(buff_,buffer_s32,_inst.hlth);
buffer_write(buff_,buffer_s32,_inst.engy);
buffer_write(buff_,buffer_s32,_inst.hngr);
buffer_write(buff_,buffer_s32,_inst.thst);
buffer_write(buff_,buffer_s32,_inst.temp);
global.array[2] = ds_list_create();
with(obj_playerobject)
{
    if(socket != global.array[4])
    {
        ds_list_add(global.array[2],id);
    }
}
var nm_ = ds_list_size(global.array[2]);
buffer_write(buff_,buffer_u16,nm_);
for(i = 0; i &lt; nm_; i++)
{
    var id_ = ds_list_find_value(global.array[2],i);
    buffer_write(buff_,buffer_s16,id_.socket);
    buffer_write(buff_,buffer_f32,id_.dir   );
    buffer_write(buff_,buffer_f32,id_.pit   );
    buffer_write(buff_,buffer_f32,id_.x     );
    buffer_write(buff_,buffer_f32,id_.y     );
    buffer_write(buff_,buffer_f32,id_.z     );
    buffer_write(buff_,buffer_u16,id_.current_item);
    buffer_write(buff_,buffer_s32,id_.hlth  );
    buffer_write(buff_,buffer_s32,id_.engy  );
    buffer_write(buff_,buffer_s32,id_.hngr  );
    buffer_write(buff_,buffer_s32,id_.thst  );
    buffer_write(buff_,buffer_s32,id_.temp  );
}
ds_list_destroy(global.array[2]);
global.array[2] = ds_list_create();
with(obj_boxcollider)
{
    ds_list_add(global.array[2],id);
}
nm_ = ds_list_size(global.array[2]);
buffer_write(buff_,buffer_u32,nm_);
for(i = 0; i &lt; nm_; i++)
{
    var id_ = ds_list_find_value(global.array[2],i);
    buffer_write(buff_,buffer_u32,id_.col_id);
    buffer_write(buff_,buffer_s32,id_.x           );
    buffer_write(buff_,buffer_s32,id_.y           );
    buffer_write(buff_,buffer_s32,id_.z           );
    buffer_write(buff_,buffer_f32,id_.image_xscale);
    buffer_write(buff_,buffer_f32,id_.image_yscale);
    buffer_write(buff_,buffer_s32,id_.zheight     );
    buffer_write(buff_,buffer_u16,id_.tex         );
}
ds_list_destroy(global.array[2]);
buffer_write(buff_,buffer_bool,obj_server.fog_enabled);
buffer_write(buff_,buffer_s32 ,obj_server.fog_color  );
buffer_write(buff_,buffer_s32 ,obj_server.fog_start  );
buffer_write(buff_,buffer_s32 ,obj_server.fog_end    );

global.array[2] = buff_;
buffer_write(buff_,buffer_u16,instance_number(obj_item));
with(obj_item)
{
    buffer_write(buff_,buffer_u16,_id_);
    buffer_write(buff_,buffer_s32,x   );
    buffer_write(buff_,buffer_s32,y   );
    buffer_write(buff_,buffer_s32,z   );
    buffer_write(buff_,buffer_u16,item);
}
show_debug_message("send player data to joined player");
network_send_packet(_inst.socket,buff_,buffer_tell(buff_));
buffer_delete(buff_);
ds_list_destroy(global.array[3]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
