<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>server = network_create_server(network_socket_tcp,5524,8);
if(server &lt; 0)
{
    show_message("failed to create server");
    game_end();
}
tempArray[7]     = -1;
tempList[4]      = -1;
place_mode       = 0;
is_placing       = false;
place_x1         = 0;
place_y1         = 0;
place_x2         = 0;
place_y2         = 0;
place_z          = 0;
place_zheight    = 32;
global.boxcol_id = 0;
grid_enabled     = false;
grid_w           = 32;
grid_h           = 32;
view_movex1      = 0;
view_movey1      = 0;
view_movex2      = 0;
view_movey2      = 0;
fog_enabled      = true;
fog_color        = c_white;
fog_start        = 512;
fog_end          = 1024;
pfog_enabled     = !fog_enabled;
pfog_color       = fog_color;
pfog_start       = fog_start;
pfog_end         = fog_end;
global.item_id   = 0;
global.array[15]  = -1;/*
global array static usage (meaning you shouldn't use this anywhere else*):
    0 = temporary data for anything
    1 = server playerobject updates
*/// *make sure you know what you're doing

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(ds_exists(global.array[1],ds_type_list))
{
    ds_list_destroy(global.array[1]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.array[1] = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var sz_ = ds_list_size(global.array[1]);
if(sz_ &gt; 0)
{
    var id_;
    for(i = 0; i &lt; sz_; i++)
    {
        id_ = ds_list_find_value(global.array[1],i);
        var buff_ = buffer_create(26,buffer_fixed,2);
        buffer_seek(buff_,buffer_seek_start,0);
        buffer_write(buff_,buffer_u16,1               ); //data id
        buffer_write(buff_,buffer_s16,id_.socket      ); //socket
        buffer_write(buff_,buffer_f32,id_.dir         ); //playerobject dir
        buffer_write(buff_,buffer_f32,id_.pit         ); //playerobject pit
        buffer_write(buff_,buffer_f32,id_.x           ); //playerobject x
        buffer_write(buff_,buffer_f32,id_.y           ); //playerobject y
        buffer_write(buff_,buffer_f32,id_.z           ); //playerobject z
        buffer_write(buff_,buffer_u16,id_.current_item); //current item
        global.array[2] = ds_list_create();
        global.array[3] = id_;
        with(obj_playerobject)
        {
            if(global.array[3] != id)
            {
                ds_list_add(global.array[2],socket)
            }
        }
        var nm_ = ds_list_size(global.array[2]);
        show_debug_message("sending updated playerobject " + string(id_));
        for(j = 0; j &lt; nm_; j++)
        {
            id2_ = ds_list_find_value(global.array[2],j);
            if(id2_ != id_)
            {
                network_send_packet(id2_,buff_,buffer_tell(buff_));
            }
        }
        ds_list_destroy(global.array[1]);
        buffer_delete(buff_);
        var buff_ = buffer_create(44,buffer_fixed,2);
        buffer_seek(buff_,buffer_seek_start,0);
        buffer_write(buff_,buffer_u16,0      ); //data id
        buffer_write(buff_,buffer_f32,id_.dir); //playerobject dir
        buffer_write(buff_,buffer_f32,id_.pit); //playerobject pit
        buffer_write(buff_,buffer_f32,id_.x  ); //playerobject x
        buffer_write(buff_,buffer_f32,id_.y  ); //playerobject y
        buffer_write(buff_,buffer_f32,id_.z+id_.headz); //playerobject z
        buffer_write(buff_,buffer_u16,id_.current_item); //current item
        buffer_write(buff_,buffer_s32,id_.hlth); //playerobject hlth
        buffer_write(buff_,buffer_s32,id_.engy);
        buffer_write(buff_,buffer_s32,id_.hngr);
        buffer_write(buff_,buffer_s32,id_.thst);
        buffer_write(buff_,buffer_s32,id_.temp);
        show_debug_message("sending updated playerdata to player");
        network_send_packet(id_.socket,buff_,buffer_tell(buff_));
        buffer_delete(buff_);
    }
}


if(mouse_wheel_up())   place_mode += 1;
if(mouse_wheel_down()) place_mode -= 1;
if(mouse_check_button_pressed(mb_left))
{
    switch(place_mode)
    {
        case -4: //tool fog end change
            place_y1   = mouse_y;
            is_placing = true;
            break;
        case -3: //tool fog start change
            place_y1   = mouse_y;
            is_placing = true;
        case -2: //tool zheight change
            place_y1   = mouse_y;
            is_placing = true;
            break;
        case -1: //tool z change
            place_y1   = mouse_y;
            is_placing = true;
            break;
        case 0: //object whitewall
            place_x1   = mouse_x;
            place_y1   = mouse_y;
            is_placing = true;
            break;
        case 1: //object grass
            place_x1   = mouse_x;
            place_y1   = mouse_y;
            is_placing = true;
            break;
        case 2: //object item
            place_x1   = mouse_x;
            place_y1   = mouse_y;
            is_placing = true;
            break;
        default:
            break;
    }
}
if(mouse_check_button(mb_left))
{
    switch(place_mode)
    {
        case -4: //tool fog end change
            place_y2 = mouse_y;
            break;
        case -3: //tool fog start change
            place_y2 = mouse_y;
            break;
        case -2: //tool zheight change
            place_y2 = mouse_y;
            break;
        case -1: //tool z change
            place_y2 = mouse_y;
            break;
        case 0: //object whitewall
            place_x2 = mouse_x;
            place_y2 = mouse_y;
            break;
        case 1: //object grass
            place_x2 = mouse_x;
            place_y2 = mouse_y;
            break;
        case 2: //object item
            place_y2 = mouse_y;
            break;
        default:
            break;
    }
}
if(grid_enabled)
{
    place_x1 = floor(place_x1/grid_w)*grid_w;
    place_y1 = floor(place_y1/grid_h)*grid_h;
    place_x2 = floor(place_x2/grid_w)*grid_w;
    place_y2 = floor(place_y2/grid_h)*grid_h;
}
if(mouse_check_button_released(mb_left))
{
    switch(place_mode)
    {
        case -4: //tool fog end change
            is_placing = false;
            fog_end = max(abs(place_y2-place_y1),fog_start);
            break;
        case -3: //tool fog start change
            is_placing = false;
            fog_start = min(abs(place_y2-place_y1),fog_end);
            break;
        case -2: //tool zheight change
            is_placing = false;
            place_zheight = place_y2-place_y1;
            break;
        case -1: //tool z change
            is_placing = false;
            place_z = place_y2-place_y1;
            break;
        case 0: //object whitewall
            is_placing = false;
            if(place_x1 != place_x2 &amp;&amp; place_y1 != place_y2)
            {
                var x1_ = min(place_x1,place_x2);
                var y1_ = min(place_y1,place_y2);
                var x2_ = max(place_x1,place_x2);
                var y2_ = max(place_y1,place_y2);
                var wd_ = x2_-x1_;
                var ht_ = y2_-y1_;
                var inst_ = instance_create(x1_,y1_,obj_boxcollider);
                inst_.image_xscale = wd_/sprite_get_height(spr_boxcollider);
                inst_.image_yscale = ht_/sprite_get_width( spr_boxcollider);
                inst_.zheight      = place_zheight;
                inst_.z            = place_z;
                inst_.tex          = 0;
            }
            break;
        case 1: //object grass
            is_placing = false;
            if(place_x1 != place_x2 &amp;&amp; place_y1 != place_y2)
            {
                var x1_ = min(place_x1,place_x2);
                var y1_ = min(place_y1,place_y2);
                var x2_ = max(place_x1,place_x2);
                var y2_ = max(place_y1,place_y2);
                var wd_ = x2_-x1_;
                var ht_ = y2_-y1_;
                var inst_ = instance_create(x1_,y1_,obj_boxcollider);
                inst_.image_xscale = wd_/sprite_get_height(spr_boxcollider);
                inst_.image_yscale = ht_/sprite_get_width( spr_boxcollider);
                inst_.zheight      = place_zheight;
                inst_.z            = place_z;
                inst_.tex          = 1;
            }
            break;
        case 2: //object item
            is_placing = false;
            //if(place_y1 != place_y2)
            {
                var y1_ = min(place_y1,place_y2);
                var y2_ = max(place_y1,place_y2);
                var ht_ = abs(y2_-y1_);
                var inst_ = instance_create(place_x1,place_y1,obj_item);
                inst_.item = ht_;
                inst_.z    = place_z;
            }
        default:
            break;
    }
}

if(fog_enabled != pfog_enabled || fog_color != pfog_color || fog_start != pfog_start || fog_end != pfog_end)
{
    var buff_ = buffer_create(15,buffer_fixed,1);
    buffer_write(buff_,buffer_u16 ,7          );
    buffer_write(buff_,buffer_bool,fog_enabled);
    buffer_write(buff_,buffer_s32 ,fog_color  );
    buffer_write(buff_,buffer_s32 ,fog_start  );
    buffer_write(buff_,buffer_s32 ,fog_end    );
    global.array[2] = ds_list_create();
    with(obj_playerobject)
    {
        ds_list_add(other.tempList[1],socket);
    }
    sz_ = ds_list_size(tempList[1]);
    var tll_ = buffer_tell(buff_);
    show_debug_message("sending environment data");
    for(i = 0; i &lt; sz_; i++)
    {
        network_send_packet(ds_list_find_value(tempList[1],i),buff_,tll_);
    }
}

if(mouse_check_button_pressed(mb_middle))
{
    view_movex1 = window_mouse_get_x();
    view_movey1 = window_mouse_get_y();
}
if(mouse_check_button_released(mb_middle))
{
    view_movex2 = window_mouse_get_x();
    view_movey2 = window_mouse_get_y();
    view_xview[0] -= view_movex2-view_movex1;
    view_yview[0] -= view_movey2-view_movey1;
}
if(keyboard_check_pressed(ord("V"))) grid_enabled = !grid_enabled;

//end
pfog_enabled = fog_enabled;
pfog_color   = fog_color;
pfog_start   = fog_start;
pfog_end     = fog_end;











//test
if(keyboard_check_pressed(vk_space))
{
    var buff_ = buffer_create(4,buffer_grow,1);
    buffer_seek(buff_,buffer_seek_start,0);
    buffer_write(buff_,buffer_u16,13);
    buffer_write(buff_,buffer_string,"hello");
    global.array[2] = ds_list_create();
    with(obj_playerobject)
    {
        ds_list_add(global.array[2],socket);
    }
    var sz_ = ds_list_size(global.array[2]);
    var tll_ = buffer_tell(buff_);
    for(i = 0; i &lt; sz_; i++ )
    {
        network_send_packet(ds_list_find_value(global.array[2],i),buff_,tll_);
    }
    ds_list_destroy(global.array[2]);
    buffer_delete(buff_);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var as_type = ds_map_find_value(async_load,"type");
var as_id   = ds_map_find_value(async_load,"id"  );
var as_ip   = ds_map_find_value(async_load,"ip"  );
var as_port = ds_map_find_value(async_load,"port");
switch(as_type)
{
    case network_type_data:
        var as_buff = ds_map_find_value(async_load,"buffer");
        data_received(as_id,as_buff);
        break;
    case network_type_connect:
        var as_sock  = ds_map_find_value(async_load,"socket");
        var inst_    = instance_create(0,0,obj_playerobject);
        inst_.z      = 0;
        inst_.xspeed = 0;
        inst_.yspeed = 0;
        inst_.zspeed = 0;
        inst_.hlth   = 128;
        inst_.engy   = 96;
        inst_.hngr   = 96;
        inst_.thst   = 96;
        inst_.temp   = 128;
        inst_.current_item = 1;
        inst_.socket = as_sock;
        inst_.ip     = as_ip;
        inst_.port   = as_port;
        var inst2_ = instance_create(0,0,obj_server_newplayer);
        inst2_._inst = inst_;
        break;
    case network_type_disconnect:
        var as_sock = ds_map_find_value(async_load,"socket");
        global.array[2] = as_sock;
        with(obj_playerobject)
        {
            if(socket == global.array[2])
            {
                instance_destroy();
            }
        }
        break;
    default:
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var text_ = "[scroll wheel] mode: ";
switch(place_mode)
{
    case -4: //tool fog end change
        text_ += "tool: fog end change [" + string(place_y2-place_y1) + "]";
        break;
    case -3: //tool fog start change
        text_ += "tool: fog start change [" + string(place_y2-place_y1) + "]";
        break;
    case -2: //tool zheight change
        text_ += "tool: zheight change [" + string(place_y2-place_y1) + "]";
        break;
    case -1: //tool z change
        text_ += "tool: z change [" + string(place_y2-place_y1) + "]";
        break;
    case 0: //object whitewall
        text_ += "object: whitewall";
        break;
    case 1: //object grass
        text_ += "object: grass";
        break;
    case 2: //object item
        text_ += "object: item [" + string(place_y2-place_y1) + "]";
        break;
    default:
        text_ += "{" + string(place_mode) + "}";
        break;
}
text_ += "#press v to toggle grid";
draw_text(0,0,text_);
if(grid_enabled)
{
    draw_grid(floor(view_xview[0]/grid_w)*grid_w,floor(view_yview[0]/grid_h)*grid_h
        ,view_wview[0]+grid_w,view_hview[0]+grid_h
        ,ceil((view_xview[0]+view_wview[0])/grid_w)*grid_w
        ,ceil((view_yview[0]+view_hview[0])/grid_h)*grid_h);
}
if(is_placing)
{
    draw_rectangle(min(place_x1,place_x2),min(place_y1,place_y2),max(place_x1,place_x2),max(place_y1,place_y2),true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
